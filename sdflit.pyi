from typing import Tuple

__all__ = [
    "SDF",
    "merge",
    "intersect",
    "subtract",
    "FrustumCone",
    "RoundCone",
    "Sphere",
]

Vector3 = Tuple[float, float, float]

class SDF:
    def distance(self, p: Vector3) -> float: ...
    def inside(self, p: Vector3) -> bool: ...

def merge(a: SDF, b: SDF) -> SDF: ...
def intersect(a: SDF, b: SDF) -> SDF: ...
def subtract(a: SDF, b: SDF) -> SDF: ...

# primitive

class FrustumCone:
    def __init__(self, a: Vector3, b: Vector3, ra: float, rb: float) -> None: ...
    def distance(self, p: Vector3) -> float: ...
    def inside(self, p: Vector3) -> bool: ...
    def into(self) -> SDF: ...

class RoundCone:
    def __init__(self, a: Vector3, b: Vector3, ra: float, rb: float) -> None: ...
    def distance(self, p: Vector3) -> float: ...
    def inside(self, p: Vector3) -> bool: ...
    def into(self) -> SDF: ...

class Sphere:
    def __init__(self, center: Vector3, radius: float) -> None: ...
    def distance(self, p: Vector3) -> float: ...
    def inside(self, p: Vector3) -> bool: ...
    def into(self) -> SDF: ...
