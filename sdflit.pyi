from typing import Tuple

__all__ = [
    "SDF",
    "merge",
    "intersect",
    "subtract",
    "FrustumCone",
    "RoundCone",
    "Sphere",
]

Vector3 = Tuple[float, float, float]

# SDF and Primitives

class SDF:
    def distance(self, p: Vector3) -> float: ...
    def inside(self, p: Vector3) -> bool: ...

class FrustumCone:
    def __new__(cls, a: Vector3, b: Vector3, ra: float, rb: float) -> FrustumCone: ...
    def distance(self, p: Vector3) -> float: ...
    def inside(self, p: Vector3) -> bool: ...
    def into(self) -> SDF: ...

class RoundCone:
    def __new__(cls, a: Vector3, b: Vector3, ra: float, rb: float) -> RoundCone: ...
    def distance(self, p: Vector3) -> float: ...
    def inside(self, p: Vector3) -> bool: ...
    def into(self) -> SDF: ...

class Sphere:
    def __new__(cls, center: Vector3, radius: float) -> Sphere: ...
    def distance(self, p: Vector3) -> float: ...
    def inside(self, p: Vector3) -> bool: ...
    def into(self) -> SDF: ...

# Composition

def merge(a: SDF, b: SDF) -> SDF: ...
def intersect(a: SDF, b: SDF) -> SDF: ...
def subtract(a: SDF, b: SDF) -> SDF: ...

# Material

class Material: ...

class ColoredMaterial:
    def __new__(cls, color: Vector3) -> ColoredMaterial: ...
    def into(self) -> Material: ...

# Object

class Object: ...

class SDFObject:
    def __new__(cls, sdf: SDF, material: Material) -> SDFObject: ...
    def into(self) -> Object: ...

# Scene

class Scene:
    def hit(self, p: Vector3) -> Vector3: ...

class ObjectsScene:
    def __new__(cls) -> ObjectsScene: ...
    def add_object(self, object: Object) -> None: ...
    def build_bvh(self) -> None: ...
    def set_background(self, background: Vector3) -> None: ...
    def into(self) -> Scene: ...
