from typing import Literal, Self, Tuple

import numpy as np
import numpy.typing as npt

__all__ = [
    # fmt: off
    "SDF",
    "FrustumCone", "RoundCone", "Sphere",
    "merge", "intersect", "subtract",
    "Material", "ColoredMaterial", "LinearGradientMaterial",
    "Object", "SDFObject",
    "Scene", "ObjectsScene",
    "RangeSampler", "UniformSampler"
    # fmt: on
]

Vec3f = Tuple[float, float, float]

# SDF and Primitives

class SDF:
    def distance(self, p: Vec3f) -> float: ...
    def inside(self, p: Vec3f) -> bool: ...
    def bounding_box(self) -> Tuple[Vec3f, Vec3f]: ...

class FrustumCone:
    def __new__(cls, a: Vec3f, b: Vec3f, ra: float, rb: float) -> FrustumCone: ...
    def distance(self, p: Vec3f) -> float: ...
    def inside(self, p: Vec3f) -> bool: ...
    def bounding_box(self) -> Tuple[Vec3f, Vec3f]: ...
    def into(self) -> SDF: ...

class RoundCone:
    def __new__(cls, a: Vec3f, b: Vec3f, ra: float, rb: float) -> RoundCone: ...
    def distance(self, p: Vec3f) -> float: ...
    def inside(self, p: Vec3f) -> bool: ...
    def bounding_box(self) -> Tuple[Vec3f, Vec3f]: ...
    def into(self) -> SDF: ...

class Sphere:
    def __new__(cls, center: Vec3f, radius: float) -> Sphere: ...
    def distance(self, p: Vec3f) -> float: ...
    def inside(self, p: Vec3f) -> bool: ...
    def bounding_box(self) -> Tuple[Vec3f, Vec3f]: ...
    def into(self) -> SDF: ...

# Composition

def merge(a: SDF, b: SDF) -> SDF: ...
def intersect(a: SDF, b: SDF) -> SDF: ...
def subtract(a: SDF, b: SDF) -> SDF: ...

# Material

class Material: ...

class ColoredMaterial:
    def __new__(cls, color: Vec3f) -> ColoredMaterial: ...
    def into(self) -> Material: ...

Axis = Literal["x", "y", "z"]

class LinearGradientMaterial:
    def __new__(cls, c1: Vec3f, c2: Vec3f, axis: Axis) -> LinearGradientMaterial: ...
    def into(self) -> Material: ...

# Object

class Object: ...

class SDFObject:
    def __new__(cls, sdf: SDF, material: Material) -> SDFObject: ...
    def into(self) -> Object: ...

# Scene

class Scene:
    def hit(self, p: Vec3f) -> Vec3f: ...
    def bounding_box(self) -> Tuple[Vec3f, Vec3f] | None: ...

class ObjectsScene:
    def __new__(cls) -> ObjectsScene: ...
    def add_object(self, object: Object) -> None: ...
    def build_bvh(self) -> None: ...
    def set_background(self, background: Vec3f) -> None: ...
    def bounding_box(self) -> Tuple[Vec3f, Vec3f]: ...
    def into(self) -> Scene: ...

# Sampler

class RangeSampler:
    def __new__(cls, min: Vec3f, max: Vec3f, stride: Vec3f) -> Self: ...
    def sample(self, scene: Scene) -> npt.NDArray[np.float32]: ...

class UniformSampler:
    def __new__(cls, min: Vec3f, max: Vec3f) -> Self: ...
    def sample(self, scene: Scene, count: int) -> npt.NDArray[np.float32]: ...
